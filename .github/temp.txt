# Stop on first error
$ErrorActionPreference = 'Stop'

# Sleep for 30 seconds to ensure system is ready
Start-Sleep -Seconds 30

# Disk preparation
$partition = @"
select disk 2
create partition primary
format fs=ntfs quick
assign letter=F
"@

# Execute disk commands
$partition | Set-Content F:\diskpart.txt
& diskpart /s F:\diskpart.txt 2>&1

# Variables for Jenkins agent configuration
$node_name = "${jenkins_agent_prefix}-$env:COMPUTERNAME"
$agent_jar_url = "${jenkins_url}/jnlpJars/agent.jar"
$agent_jnlp_url = "${jenkins_url}/computer/$node_name/slave-agent.jnlp"
$jenkins_auth = "${jenkins_username}:${jenkins_token}"
$jenkins_workspace = "C:\Jenkins"
$jenkins_executor = 1
$jenkins_label = "${jenkins_labels}"
$ip_address = (Get-NetIPAddress | Where { $_.IPAddress -like "10.*" }).IPAddress

# Install Python and Jenkins module
& python -m pip install python-jenkins -U | Out-Null
Import-Module Jenkins

# Connect to Jenkins server
$server = Jenkins.Jenkins("${jenkins_url}", "${jenkins_username}", "${jenkins_token}")

# Try to delete the node if it exists
Try {
    $server.delete_node("$node_name")
}
Catch [Jenkins.JenkinsException] as $e {
    If ("does not exist" -not in $e){
        raise $e
    }
}

# Create the node in Jenkins
$server.create_node(
    "$node_name",
    nodeDescription="$ip_address",
    numExecutors=$jenkins_executor,
    remoteFsRoot="$jenkins_workspace",
    labels="$jenkins_label",
    exclusive=True,
    launcher=Jenkins.LAUNCHER_JNLP
)

# Configure robust autologon that persists across reboots
# This uses multiple methods to ensure autologon works
Write-Output "Setting up robust autologon..."

# Clear any existing autologon settings first
$RegPath = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon"
Remove-ItemProperty -Path $RegPath -Name "AutoAdminLogon" -ErrorAction SilentlyContinue
Remove-ItemProperty -Path $RegPath -Name "DefaultUsername" -ErrorAction SilentlyContinue
Remove-ItemProperty -Path $RegPath -Name "DefaultPassword" -ErrorAction SilentlyContinue
Remove-ItemProperty -Path $RegPath -Name "DefaultDomainName" -ErrorAction SilentlyContinue

# Primary method - registry entries
Set-ItemProperty -Path $RegPath -Name "AutoAdminLogon" -Value "1" -Type String -Force
Set-ItemProperty -Path $RegPath -Name "DefaultUsername" -Value "${admin_username}" -Type String -Force
Set-ItemProperty -Path $RegPath -Name "DefaultPassword" -Value "${admin_password}" -Type String -Force
Set-ItemProperty -Path $RegPath -Name "DefaultDomainName" -Value "$env:COMPUTERNAME" -Type String -Force
Set-ItemProperty -Path $RegPath -Name "ForceAutoLogon" -Value "1" -Type String -Force

# Backup method - netplwiz command-line approach
$autoLogonUser = @"
@echo off
net user "${admin_username}" "${admin_password}"
reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" /v AutoAdminLogon /t REG_SZ /d 1 /f
reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" /v DefaultUserName /t REG_SZ /d "${admin_username}" /f
reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" /v DefaultPassword /t REG_SZ /d "${admin_password}" /f
reg add "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" /v ForceAutoLogon /t REG_SZ /d 1 /f
"@
Set-Content -Path "C:\autologon.cmd" -Value $autoLogonUser -Force

# Run the backup autologon script
& cmd.exe /c C:\autologon.cmd

# Disable screen saver and sleep settings to prevent interruptions
powercfg /change standby-timeout-ac 0
powercfg /change standby-timeout-dc 0
powercfg /change monitor-timeout-ac 0
powercfg /change monitor-timeout-dc 0

# Disable UAC to prevent authentication prompts during automation
New-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "EnableLUA" -Value 0 -PropertyType DWord -Force

# Disable Server Manager startup for desktop experience
New-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\ServerManager" -Name "DoNotOpenServerManagerAtLogon" -Value 1 -PropertyType DWord -Force

# Create Jenkins directory
New-Item -Path $jenkins_workspace -ItemType Directory -Force | Out-Null

# Download agent.jar
$agent_jar_path = Join-Path $jenkins_workspace "agent.jar"
Invoke-WebRequest -Uri $agent_jar_url -OutFile $agent_jar_path -Credential (New-Object System.Management.Automation.PSCredential ($jenkins_username, (ConvertTo-SecureString $jenkins_token -AsPlainText -Force)))

# Download PsExec for interactive process launching
$psexec_path = "C:\Windows\System32\PsExec.exe"
Invoke-WebRequest -Uri "https://download.sysinternals.com/files/PSTools.zip" -OutFile "C:\PSTools.zip"
Expand-Archive -Path "C:\PSTools.zip" -DestinationPath "C:\PSTools" -Force
Copy-Item "C:\PSTools\PsExec.exe" -Destination $psexec_path -Force

# Create a direct interactive session launcher script - with reconnection logic
$interactive_launcher = @"
@echo off
REM Force Java process to run in session 0 with UI access
:reconnect
echo %DATE% %TIME% - Starting Jenkins agent in interactive mode >> C:\Jenkins\agent.log
C:\Windows\System32\PsExec.exe -i -s -d java -jar "$agent_jar_path" -jnlpUrl "$agent_jnlp_url" -jnlpCredentials "${jenkins_username}:${jenkins_token}"
echo %DATE% %TIME% - Agent disconnected, reconnecting in 10 seconds... >> C:\Jenkins\agent.log
timeout /t 10
goto reconnect
"@
Set-Content -Path "C:\Jenkins\interactive_launcher.cmd" -Value $interactive_launcher -Force

# Grant special UI permissions for automation
$ui_access_key = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"
New-ItemProperty -Path $ui_access_key -Name "EnableUIADesktopToggle" -Value 1 -PropertyType DWord -Force
New-ItemProperty -Path $ui_access_key -Name "EnableLinkedConnections" -Value 1 -PropertyType DWord -Force

# Create a scheduled task to run the Jenkins agent with SYSTEM privileges and interactive desktop
# Configuring to run whether user is logged in or not
$taskAction = New-ScheduledTaskAction -Execute "C:\Windows\System32\cmd.exe" -Argument "/c C:\Jenkins\interactive_launcher.cmd"
$taskTrigger = New-ScheduledTaskTrigger -AtStartup
$taskSettings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -Hidden:$false -RunOnlyIfNetworkAvailable
$taskPrincipal = New-ScheduledTaskPrincipal -UserId "SYSTEM" -LogonType ServiceAccount -RunLevel Highest
Register-ScheduledTask -TaskName "JenkinsInteractiveAgent" -Action $taskAction -Trigger $taskTrigger -Settings $taskSettings -Principal $taskPrincipal -Force

# Add startup script to also ensure agent runs on login
$startup_folder = "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp"
$startup_script = @"
@echo off
REM Also start the agent on user login as a backup method
start "" C:\Jenkins\interactive_launcher.cmd
"@
Set-Content -Path "$startup_folder\start_jenkins_agent.cmd" -Value $startup_script -Force

# Create a Robot Framework wrapper with enhanced UI access
$robot_wrapper = @"
@echo off
REM Set special environment variables for UI access
SET PYTHONUNBUFFERED=1
SET DISPLAY=0:0
SET QT_QPA_PLATFORM=windows

REM Log debug info
echo %DATE% %TIME% - Starting Robot Framework test >> C:\Jenkins\robot.log
echo Current session: >> C:\Jenkins\robot.log
query session >> C:\Jenkins\robot.log

REM Run Robot Framework with optimized screenshot settings
robot --variable SCREENSHOT_MODULE:wx --variable SCREENSHOT_DELAY:1 %*
"@
Set-Content -Path "C:\Jenkins\run_robot.cmd" -Value $robot_wrapper -Force

# Enable SSH capability
Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0
Start-Service sshd
Set-Service -Name sshd -StartupType 'Automatic'

# Configure firewall for SSH
If ((Get-NetFirewallRule -Name "OpenSSH-Server-In-TCP" -ErrorAction SilentlyContinue | Select-Object Name, Enabled) -eq $null) {
    Write-Output "Firewall rule 'OpenSSH-Server-In-TCP' does not exist, creating it..."
    New-NetFirewallRule -Name 'OpenSSH-Server-In-TCP' -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22
} else {
    Write-Output "Firewall rule 'OpenSSH-Server-In-TCP' has been created and exists."
}

# Set network profile to Private
Set-NetConnectionProfile -NetworkCategory Private

# Create an aggressive reboot script to retry autologon
$reboot_logic = @"
@echo off
REM Run this script at first logon
echo %DATE% %TIME% - First logon reached >> C:\Jenkins\boot.log
REM Verify autologon is still configured
reg query "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon" /v AutoAdminLogon >> C:\Jenkins\boot.log

REM Start the Jenkins agent task
schtasks /run /tn JenkinsInteractiveAgent

REM Force the user to stay logged in
echo Disabling lock screen and screensaver... >> C:\Jenkins\boot.log
reg add "HKEY_CURRENT_USER\Control Panel\Desktop" /v ScreenSaveActive /t REG_SZ /d 0 /f
"@
Set-Content -Path "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\first_logon.cmd" -Value $reboot_logic -Force

# Start the interactive Jenkins agent task immediately
Start-ScheduledTask -TaskName "JenkinsInteractiveAgent"

# Restart the computer to apply autologon settings
Write-Output "Restarting computer to apply auto-login settings..."
Restart-Computer -Force 
