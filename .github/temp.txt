# Stop on first error
$ErrorActionPreference = 'Stop'

# Sleep for 30 seconds to ensure system is ready
Start-Sleep -Seconds 30

# Disk preparation
$partition = @"
select disk 2
create partition primary
format fs=ntfs quick
assign letter=F
"@

# Execute disk commands
$partition | Set-Content F:\diskpart.txt
& diskpart /s F:\diskpart.txt 2>&1

# Download Jenkins slave executable
Invoke-WebRequest https://github.com/winsw/winsw/releases/download/v2.12.0/WinSW-x64.exe -OutFile C:\jenkins-slave.exe

# Variables for Jenkins agent configuration
$node_name = "${jenkins_agent_prefix}-$env:COMPUTERNAME"
$agent_jar_url = "${jenkins_url}/jnlpJars/agent.jar"
$agent_jnlp_url = "${jenkins_url}/computer/$node_name/slave-agent.jnlp"
$jenkins_auth = "${jenkins_username}:${jenkins_token}"
$jenkins_workspace = "C:\Jenkins"
$jenkins_executor = 1
$jenkins_label = "${jenkins_labels}"
$ip_address = (Get-NetIPAddress | Where { $_.IPAddress -like "10.*" }).IPAddress

# Install Python and Jenkins module
& python -m pip install python-jenkins -U | Out-Null
Import-Module Jenkins

# Connect to Jenkins server
$server = Jenkins.Jenkins("${jenkins_url}", "${jenkins_username}", "${jenkins_token}")

# Try to delete the node if it exists
Try {
    $server.delete_node("$node_name")
}
Catch [Jenkins.JenkinsException] as $e {
    If ("does not exist" -not in $e){
        raise $e
    }
}

# Create the node in Jenkins
$server.create_node(
    "$node_name",
    nodeDescription="$ip_address",
    numExecutors=$jenkins_executor,
    remoteFsRoot="$jenkins_workspace",
    labels="$jenkins_label",
    exclusive=True,
    launcher=Jenkins.LAUNCHER_JNLP
)

# Set up auto-login for the admin user
$RegPath = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon"
Set-ItemProperty -Path $RegPath -Name "AutoAdminLogon" -Value "1" -Type String -Force
Set-ItemProperty -Path $RegPath -Name "DefaultUsername" -Value "${admin_username}" -Type String -Force
Set-ItemProperty -Path $RegPath -Name "DefaultPassword" -Value "${admin_password}" -Type String -Force
Set-ItemProperty -Path $RegPath -Name "DefaultDomainName" -Value "$env:COMPUTERNAME" -Type String -Force

# Disable screen saver and sleep settings to prevent interruptions
powercfg /change standby-timeout-ac 0
powercfg /change standby-timeout-dc 0
powercfg /change monitor-timeout-ac 0
powercfg /change monitor-timeout-dc 0

# Disable UAC to prevent authentication prompts during automation
New-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "EnableLUA" -Value 0 -PropertyType DWord -Force

# Disable Server Manager startup for desktop experience
New-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\ServerManager" -Name "DoNotOpenServerManagerAtLogon" -Value 1 -PropertyType DWord -Force

# Create Jenkins directory
New-Item -Path $jenkins_workspace -ItemType Directory -Force | Out-Null

# Download agent.jar
$agent_jar_path = Join-Path $jenkins_workspace "agent.jar"
Invoke-WebRequest -Uri $agent_jar_url -OutFile $agent_jar_path -Credential (New-Object System.Management.Automation.PSCredential ($jenkins_username, (ConvertTo-SecureString $jenkins_token -AsPlainText -Force)))

# Create a startup script for the Jenkins agent
$startup_script = @"
@echo off
REM This runs the Jenkins agent in interactive mode
cd $jenkins_workspace
REM Add a slight delay to ensure desktop is fully loaded
timeout /t 30
REM Run with javaw.exe to ensure proper UI interaction
start "" javaw -jar "$agent_jar_path" -jnlpUrl "$agent_jnlp_url" -jnlpCredentials "${jenkins_username}:${jenkins_token}" -noreconnect
"@
$startup_script_path = "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp\start_jenkins_agent.bat"
Set-Content -Path $startup_script_path -Value $startup_script -Force

# Enable SSH capability
Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0
Start-Service sshd
Set-Service -Name sshd -StartupType 'Automatic'

# Configure firewall for SSH
If ((Get-NetFirewallRule -Name "OpenSSH-Server-In-TCP" -ErrorAction SilentlyContinue | Select-Object Name, Enabled) -eq $null) {
    Write-Output "Firewall rule 'OpenSSH-Server-In-TCP' does not exist, creating it..."
    New-NetFirewallRule -Name 'OpenSSH-Server-In-TCP' -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22
} else {
    Write-Output "Firewall rule 'OpenSSH-Server-In-TCP' has been created and exists."
}

# Set network profile to Private
Set-NetConnectionProfile -NetworkCategory Private

# Restart the computer to apply auto-login
Write-Output "Restarting computer to apply auto-login settings..."
Restart-Computer -Force 
